<!--
    Copyright (c) 2007 Allurent, Inc.
    http://code.google.com/p/antennae/
    
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    
    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<project>
    <!--
        ++ =======================================================================
        ++ Macro: mxmlc
        ++ Compile Flex source into a SWF
        ++ =======================================================================
    -->
    <macrodef name="mxmlc" description="">
        <attribute name="src" />
        <attribute name="dest" />
        <attribute name="src.path" />
        <attribute name="lib.path" />
        <attribute name="options" default="" />
        <attribute name="config" default="${flex2.config}" />
        <sequential>
            <pathconvert property="mxmlc2.lib.files" refid="@{lib.path}" pathsep="," />
            <condition property="mxmlc2.libpath" value="-library-path+=${mxmlc2.lib.files}"
                else="">
                <not>
                    <equals arg1="" arg2="${mxmlc2.lib.files}" trim="true" />
                </not>
            </condition>

            <java jar="${flex2.mxmlc.jar}" dir="." fork="true" failonerror="true">
                <jvmarg value="-Xmx512m" />
                <arg line="@{options} ${mxmlc2.libpath}" />
                <arg value="+flexlib=${flex2.frameworks.dir}" />
                <arg value="-load-config=@{config}" />
                <arg value="-source-path=@{src.path}" />
                <arg value="-file-specs=@{src}" />
                <arg value="-output=@{dest}" />
            </java>
        </sequential>
    </macrodef>

    <!--
        ++ =======================================================================
        ++ Macro: compc
        ++ Compile Flex source into a SWC
        ++ =======================================================================
    -->
    <macrodef name="compc" description="">
        <attribute name="src.dir" />
        <attribute name="dest" />
        <attribute name="lib.path" />
        <attribute name="options" default="" />
        <attribute name="config" default="${flex2.config}" />

        <sequential>
            <pathconvert property="compc2.lib.files" refid="@{lib.path}" pathsep="," />
            <condition property="compc2.libpath" value="-library-path+=${compc2.lib.files}"
                else="">
                <not>
                    <equals arg1="" arg2="${compc2.lib.files}" trim="true" />
                </not>
            </condition>

            <delete quiet="${quiet}" file="@{dest}" />

            <java jar="${flex2.compc.jar}" dir="." fork="true" failonerror="true">
                <jvmarg value="-Xmx512m" />
                <arg line="@{options} ${compc2.libpath}" />
                <arg value="+flexlib=${flex2.frameworks.dir}" />
                <arg value="-load-config=@{config}" />
                <arg value="-source-path=@{src.dir}" />
                <arg value="-include-sources=@{src.dir}" />
                <arg value="-output=@{dest}" />
            </java>

        </sequential>
    </macrodef>

    <!--
        ++ =======================================================================
        ++ Macro: asdoc3
        ++ Create documentation
        ++ =======================================================================
    -->
    <macrodef name="as3doc" description="">
        <attribute name="src.dir" />
        <attribute name="lib.path" />
        <attribute name="options" default="" />
        <attribute name="config" default="${flex2.config}" />
        <attribute name="as.path" />
        <attribute name="dest.dir" />
        <attribute name="template.dir" />

        <sequential>
            <!-- create directories -->
            <mkdir dir="@{dest.dir}" />

            <pathconvert property="as3doc.src.files" pathsep="," dirsep=".">
                <path>
                    <fileset dir="@{src.dir}">
                        <include name="**/*.as" />
                        <include name="**/*.mxml" />
                    </fileset>
                </path>
                <mapper>
                    <regexpmapper from="^.*flex2(/|\\)(.*)\.(as|mxml)" to="\2" />
                </mapper>
            </pathconvert>

            <pathconvert property="as3doc.lib.files" refid="@{lib.path}" pathsep="," />
            <condition property="as3doc.libpath" value="-library-path+=${as3doc.lib.files}"
                else="">
                <not>
                    <equals arg1="" arg2="${as3doc.lib.files}" trim="true" />
                </not>
            </condition>

            <java classname="flex2.tools.ASDoc" dir="." fork="true" failonerror="true">
                <classpath>
                    <pathelement location="${as3doc.jar}" />
                    <pathelement location="${flex2.mxmlc.jar}" />
                </classpath>
                <jvmarg value="-Xmx512m" />
                <jvmarg value="-Xbootclasspath/p:${as3doc.xalan.jar}" />
                <arg line="@{options} ${as3doc.libpath}" />
                <arg value="-load-config=@{config}" />
                <arg value="+flexlib=${flex2.frameworks.dir}" />
                <arg value="-source-path=@{as.path}" />
                <arg value="-doc-classes=${as3doc.src.files}" />
                <arg value="-output=@{dest.dir}/" />
                <arg value="-templates-path=@{template.dir}/" />
            </java>
        </sequential>
    </macrodef>

    <!--
        ++ =======================================================================
        ++ Macro: echoAndRun
        ++ For master build files give status of the next project and target being
        ++ called
        ++ =======================================================================
    -->
    <macrodef name="echoAndRun">
        <attribute name="project" />
        <attribute name="target" />
        <sequential>
            <echo message="Running @{target} on project @{project}" />
            <ant dir="@{project}" target="@{target}" inheritAll="false" />
        </sequential>
    </macrodef>

    <!--
        ++ =======================================================================
        ++ Target: check-lib-path
        ++ Checks if any file in the given lib path is newer than
        ++ the target file, if so it creates the given timestamp file.
        ++ =======================================================================
    -->
    <macrodef name="check-lib-path">
        <attribute name="lib.path.name" />
        <attribute name="target.file" />
        <attribute name="uptodate.property" />
        <sequential>
            <foreach target="uptodate-timestamp" param="check.file">
                <param name="target.file" value="@{target.file}" />
                <param name="timestamp.file" value="@{timestamp.file}" />
                <path refid="@{lib.path.name}" />
            </foreach>
        </sequential>
    </macrodef>
</project>